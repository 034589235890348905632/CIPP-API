function Invoke-CIPPStandardDeployMailContactTemplate {
    <#
    .FUNCTIONALITY
        Internal
    .COMPONENT
        (APIName) DeployMailContactTemplate
    .SYNOPSIS
        (Label) Deploy Mail Contact Template
    .DESCRIPTION
        (Helptext) Creates a new mail contact in Exchange Online across all selected tenants. The contact will be visible in the Global Address List unless hidden.
        (DocsDescription) This standard creates a new mail contact in Exchange Online. Mail contacts are useful for adding external email addresses to your organization's address book. They can be used for distribution lists, shared mailboxes, and other collaboration scenarios.
    .NOTES
        CAT
            Exchange Standards
        TAG
        ADDEDCOMPONENT
            {"type":"textField","name":"ExternalEmailAddress","label":"External Email Address","required":true}
            {"type":"textField","name":"DisplayName","label":"Display Name","required":true}
            {"type":"textField","name":"FirstName","label":"First Name","required":false}
            {"type":"textField","name":"LastName","label":"Last Name","required":false}
            {"type":"textField","name":"Company","label":"Company","required":false}
            {"type":"textField","name":"Office","label":"Office","required":false}
            {"type":"textField","name":"State","label":"State","required":false}
            {"type":"textField","name":"Phone","label":"Phone Number","required":false}
            {"type":"textField","name":"Website","label":"Website","required":false}
            {"type":"textField","name":"MailTip","label":"Mail Tip","required":false}
            {"type":"switch","name":"HideFromGAL","label":"Hide from Global Address List"}
        MULTIPLE
            True
        IMPACT
            Low Impact
        ADDEDDATE
            2024-03-19
        POWERSHELLEQUIVALENT
            New-MailContact
        RECOMMENDEDBY
            "CIPP"
        UPDATECOMMENTBLOCK
            Run the Tools\Update-StandardsComments.ps1 script to update this comment block
    .LINK
        https://docs.cipp.app/user-documentation/tenant/standards/list-standards
    #>

    param($Tenant, $Settings)

    $APIName = 'Standards'

    # Helper function to get value from field (handles both string and {label,value} object)
    function Get-FieldValue($field) {
        if ($field -is [string]) {
            return $field
        } elseif ($field.value) {
            return $field.value
        } else {
            return ""
        }
    }

    try {
        Write-LogMessage -API $APIName -tenant $Tenant -message "DeployMailContactTemplate: Processing $($Settings.Count) contact(s)" -sev Info

        # Get the current contacts
        $CurrentContacts = New-ExoRequest -tenantid $Tenant -cmdlet 'Get-MailContact' -ErrorAction Stop

        # Compare the settings from standard with the current contacts
        $CompareList = foreach ($Contact in $Settings) {
            try {
                # Extract values using helper function
                $displayName = Get-FieldValue $Contact.DisplayName
                $emailAddress = Get-FieldValue $Contact.ExternalEmailAddress

                # Input validation for required fields
                if ([string]::IsNullOrWhiteSpace($displayName)) {
                    Write-LogMessage -API $APIName -tenant $Tenant -message "DeployMailContactTemplate: DisplayName cannot be empty for contact." -sev Error
                    continue
                }

                if ([string]::IsNullOrWhiteSpace($emailAddress)) {
                    Write-LogMessage -API $APIName -tenant $Tenant -message "DeployMailContactTemplate: ExternalEmailAddress cannot be empty for contact $displayName." -sev Error
                    continue
                }

                # Validate email address format
                try {
                    $null = [System.Net.Mail.MailAddress]::new($emailAddress)
                }
                catch {
                    Write-LogMessage -API $APIName -tenant $Tenant -message "DeployMailContactTemplate: Invalid email address format: $emailAddress" -sev Error
                    continue
                }

                # Check if the contact already exists
                $ExistingContact = $CurrentContacts | Where-Object { $_.ExternalEmailAddress -eq $emailAddress }

                # Create hashtable with desired contact settings
                $ContactData = @{
                    DisplayName          = $displayName
                    ExternalEmailAddress = $emailAddress
                    FirstName            = Get-FieldValue $Contact.FirstName
                    LastName             = Get-FieldValue $Contact.LastName
                    Company              = Get-FieldValue $Contact.Company
                    Office               = Get-FieldValue $Contact.Office
                    State                = Get-FieldValue $Contact.State
                    Phone                = Get-FieldValue $Contact.Phone
                    Website              = Get-FieldValue $Contact.Website
                    MailTip              = Get-FieldValue $Contact.MailTip
                    HideFromGAL          = [bool]$Contact.HideFromGAL
                }

                # If the contact already exists, check if it matches current settings
                if ($ExistingContact) {
                    # For now, we'll consider existing contacts as "correct" - could add comparison logic here later
                    $StateIsCorrect = $true
                    $Action = "None"
                    $Missing = $false
                }
                else {
                    # Contact doesn't exist, needs to be created
                    $StateIsCorrect = $false
                    $Action = "Create"
                    $Missing = $true
                }

                [PSCustomObject]@{
                    missing         = $Missing
                    StateIsCorrect  = $StateIsCorrect
                    Action          = $Action
                    ContactData     = $ContactData
                    remediate       = $Contact.remediate
                    alert           = $Contact.alert
                    report          = $Contact.report
                }
            }
            catch {
                $ErrorMessage = Get-NormalizedError -Message $_.Exception.Message
                $Message = "Failed to compare contact $($Contact.DisplayName), Error: $ErrorMessage"
                Write-LogMessage -API $APIName -tenant $tenant -message $Message -sev 'Error'
                Return $Message
            }
        }

        # Remediate each contact which is incorrect or missing
        If ($true -in $Settings.remediate) {
            foreach ($Contact in $CompareList | Where-Object { $_.remediate -EQ $true -and $_.StateIsCorrect -eq $false }) {
                try {
                    $ContactInfo = $Contact.ContactData

                    # Parameters for splatting to create contact
                    $NewContactParams = @{
                        displayName          = $ContactInfo.DisplayName
                        name                 = $ContactInfo.DisplayName
                        ExternalEmailAddress = $ContactInfo.ExternalEmailAddress
                    }

                    # Add optional name fields if provided
                    if (![string]::IsNullOrWhiteSpace($ContactInfo.FirstName)) {
                        $NewContactParams.FirstName = $ContactInfo.FirstName
                    }
                    if (![string]::IsNullOrWhiteSpace($ContactInfo.LastName)) {
                        $NewContactParams.LastName = $ContactInfo.LastName
                    }

                    try {
                        # Create the mail contact first
                        $NewContact = New-ExoRequest -tenantid $Tenant -cmdlet 'New-MailContact' -cmdParams $NewContactParams -UseSystemMailbox $true

                        # Build SetContactParams efficiently with only provided values
                        $SetContactParams = @{
                            Identity = $NewContact.id
                        }

                        # Helper to add non-empty values for Set-Contact
                        $PropertyMap = @{
                            'Company'         = $ContactInfo.Company
                            'StateOrProvince' = $ContactInfo.State
                            'Office'          = $ContactInfo.Office
                            'Phone'           = $ContactInfo.Phone
                            'WebPage'         = $ContactInfo.Website
                        }

                        # Add only non-null/non-empty properties
                        foreach ($Property in $PropertyMap.GetEnumerator()) {
                            if (![string]::IsNullOrWhiteSpace($Property.Value)) {
                                $SetContactParams[$Property.Key] = $Property.Value
                            }
                        }

                        # Update the contact with additional details only if we have properties to set
                        if ($SetContactParams.Count -gt 1) {
                            Start-Sleep -Milliseconds 500 # Ensure the contact is created before updating
                            $null = New-ExoRequest -tenantid $Tenant -cmdlet 'Set-Contact' -cmdParams $SetContactParams -UseSystemMailbox $true
                        }

                        # Check if we need to update MailContact properties
                        $needsMailContactUpdate = $false
                        $MailContactParams = @{
                            Identity = $NewContact.id
                        }

                        # Hide from GAL if requested
                        if ([bool]$ContactInfo.HideFromGAL) {
                            $MailContactParams.HiddenFromAddressListsEnabled = $true
                            $needsMailContactUpdate = $true
                        }

                        # Add MailTip if provided
                        if (![string]::IsNullOrWhiteSpace($ContactInfo.MailTip)) {
                            $MailContactParams.MailTip = $ContactInfo.MailTip
                            $needsMailContactUpdate = $true
                        }

                        # Only call Set-MailContact if we have changes to make
                        if ($needsMailContactUpdate) {
                            Start-Sleep -Milliseconds 500 # Ensure the contact is created before updating
                            $null = New-ExoRequest -tenantid $Tenant -cmdlet 'Set-MailContact' -cmdParams $MailContactParams -UseSystemMailbox $true
                        }

                        Write-LogMessage -API $APIName -tenant $Tenant -message "$($Contact.Action)d mail contact '$($ContactInfo.DisplayName)' with email '$($ContactInfo.ExternalEmailAddress)'" -sev Info
                    }
                    catch {
                        $ErrorMessage = Get-NormalizedError -Message $_.Exception.Message
                        Write-LogMessage -API $APIName -tenant $tenant -message "Failed to $($Contact.Action) contact $($ContactInfo.DisplayName), Error: $ErrorMessage" -sev 'Error'
                    }
                }
                catch {
                    $ErrorMessage = Get-NormalizedError -Message $_.Exception.Message
                    Write-LogMessage -API $APIName -tenant $tenant -message "Failed to create or update contact $($Contact.ContactData.DisplayName), Error: $ErrorMessage" -sev 'Error'
                }
            }
        }

        if ($true -in $Settings.alert) {
            foreach ($Contact in $CompareList | Where-Object -Property alert -EQ $true) {
                if ($Contact.StateIsCorrect) {
                    Write-LogMessage -API $APIName -tenant $Tenant -message "Mail contact $($Contact.ContactData.DisplayName) has the correct configuration." -sev Info
                }
                else {
                    if ($Contact.missing) {
                        $CurrentInfo = $Contact.ContactData | Select-Object -Property DisplayName, ExternalEmailAddress, missing
                        Write-StandardsAlert -message "Mail contact $($Contact.ContactData.DisplayName) is missing." -object $CurrentInfo -tenant $Tenant -standardName 'DeployMailContact'
                        Write-LogMessage -API $APIName -tenant $Tenant -message "Mail contact $($Contact.ContactData.DisplayName) is missing." -sev info
                    }
                    else {
                        $CurrentInfo = $CurrentContacts | Where-Object -Property ExternalEmailAddress -eq $Contact.ContactData.ExternalEmailAddress | Select-Object -Property DisplayName, ExternalEmailAddress, FirstName, LastName
                        Write-StandardsAlert -message "Mail contact $($Contact.ContactData.DisplayName) does not match the expected configuration." -object $CurrentInfo -tenant $Tenant -standardName 'DeployMailContact'
                        Write-LogMessage -API $APIName -tenant $Tenant -message "Mail contact $($Contact.ContactData.DisplayName) does not match the expected configuration. We've generated an alert" -sev info
                    }
                }
            }
        }

        if ($true -in $Settings.report) {
            foreach ($Contact in $CompareList | Where-Object -Property report -EQ $true) {
                Set-CIPPStandardsCompareField -FieldName "standards.DeployMailContact" -FieldValue $Contact.StateIsCorrect -TenantFilter $Tenant
            }
        }
    }
    catch {
        $ErrorMessage = Get-NormalizedError -Message $_.Exception.Message
        Write-LogMessage -API $APIName -tenant $tenant -message "Failed to create or update mail contact(s), Error: $ErrorMessage" -sev 'Error'
    }
}
